// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("ADMIN_DATABASE_URL")
}

model User {
  id               Int                @id @default(autoincrement())
  email            String             @unique @db.VarChar(100)
  first_name       String             @db.VarChar(50)
  last_name        String             @db.VarChar(50)
  position             String             @db.VarChar(50)
  password         String?            @db.VarChar(100)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  role             Role               @default(SUB_ADMIN)
  user_permissions UserPermission[]
  refresh_tokens   UserRefreshToken[]

  @@map("users")
}

model UserRefreshToken {
  id           Int              @id @default(autoincrement())
  expires_at   DateTime         @db.Timestamp
  user         User             @relation(references: [id], fields: [user_id], onDelete: Cascade, onUpdate: Cascade)
  user_id      Int
  access_token UserAccessToken?

  @@map("user_refresh_tokens")
}

model UserAccessToken {
  id               Int              @id @default(autoincrement())
  expires_at       DateTime         @db.Timestamp
  refresh_token_id Int              @unique
  refresh_token    UserRefreshToken @relation(references: [id], fields: [refresh_token_id], onDelete: Cascade, onUpdate: Cascade)

  @@map("user_access_tokens")
}

model PasswordRecovery {
  email      String   @id @unique @db.VarChar(100)
  token      String   @db.VarChar(100)
  expires_at DateTime @db.Timestamp

  @@map("password_recovery")
}

model Permission {
  id               Int              @id @default(autoincrement())
  name             String           @db.VarChar(50)
  key              PermissionKey
  user_permissions UserPermission[]

  @@map("permissions")
}

model UserPermission {
  user_id       Int
  user          User       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permission_id Int
  permission    Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([user_id, permission_id])
  @@map("user_permissions")
}

enum Role {
  ADMIN
  SUB_ADMIN
}

enum PermissionKey {
  WHITE_CAT
  BLACK_CAT
  BROWN_CAT
  ORANGE_CAT
  GREY_CAT
}
